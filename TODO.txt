- Check clang-format options, fill them all and then format all files.
- Remove comments after #endif.
- Templatize container in scene (so std::array can be used for constexpr raytracer).
- Check std::forward is used when needed.
- Use concepts!


- Textures.

- Finish material system. Specular color. Handle light color multiplication
  correctly, in both diffuse and specular.

- Finish sampling: refractions, ...

- Add more primitives.

- Colormaps?

- ASCII renderer?

- JPEG/PNG output?

- CLI interface/options.

- Multithreading. Maybe use [1]? Test it.
  [1]: https://en.cppreference.com/w/cpp/algorithm/transform_reduce

- Benchmark container.hpp.
  I'm detecting troubling performance diferences between using it and plain
  vectors, but more investigation is needed.

- Wide performance diferences between clang++ and g++. Benchmark and study.

- Add constexpr where applicable.

- Review noexcept usage (particualrly important in move
  constructors/assignments). See [1].
  [1]: https://stackoverflow.com/questions/10787766/

- Post-processing.

- Study using normalized_vector class.

- Simulate camera exposure, even retina exposure maybe (if there is motion)
  instead of just saturating the final color (tone mapping?).

- Signed Distance Functions. Raymarching.

- Motion. Video? Output to gif?
