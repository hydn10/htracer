- Templatize container in scene (so std::array can be used for constexpr raytracer).

- Add more concepts where needed.

- Adaptive sampling (cast more rays if there is more variance in the pixel color).

- Octree? R-d tree?

- Textures. Use object local coordinates for textures and also normals (UVs)?

- Finish material system. Specular color. Handle light color multiplication
  correctly, in both diffuse and specular. OpenPBR?

- Finish sampling: refractions, ...

- Objects should be able to be moved/rotated and removed.

- Add more primitives.

- Motion blur. Allow position to be function of time between shutter intervals.
  Time when ray is cast is then random.

- Different lenses/projections. Fisheye?

- Colormaps?

- CLI interface/options.

- Wide performance diferences between clang++ and g++. Benchmark and study.

- Add constexpr where applicable.

- Review noexcept usage (particualrly important in move
  constructors/assignments). See [1].
  [1]: https://stackoverflow.com/questions/10787766/

- Post-processing.

- ASCII renderer?

- Study using normalized_vector class. I probably should implement it.

- Tone mapping?

- Signed Distance Functions. Raymarching.