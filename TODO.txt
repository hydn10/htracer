- Set up performance benchmarks.

- thin_lens should take FOV parameter instead of radius, since the effect of radius depens on focal distance.

- Add batchers:
    * Splits image in equal (n) parts.
    * Splits each n columns.

- Batcher only needed in multithreading?
  I need to know the best batcher for the not parallel case first.

- Add some standard resolutions while still allowing custom ones.

- Fix get_dv and get_dh when h_res or v_res is 1.

- Swap h_res and v_res order in image constructor to be consistent with the rest of the interface.

- Check vector classes. See if they get autovectorized, or add vectorization manually.

- Lens takes camera const& instead of position, view, etc.

- Use std::floating_point as concept for Float.

- Add more concepts where needed.

- Many concepts (scene...) should depend on Float type (e.g. lens<Float>).

- Change templated functions to use `concept auto param` syntax instead.

- Handle global illumination. Global light should have a fixed direction instead of a fixed point.

- Replace all uint32_t for uint_fast32_t.

- Turn tracing functions into tracer class:
    * detail_ goes into private members.
    * epsilon and max_depth ara parameters instead of hardcoded.

- Pixel samplers only need to return an offset, the imput indices are redundant.

- FOV parameter should go in lens, not in camera.

- Use a system of `static constexpr bool is_thread_safe` to mark thread safe components.
  Use it to check that components passed into a renderer are thread_safe when using parallel policies.

- Image has operator[] with multiindex instead of pixels().
  This also means the result type of render can be image instead of vector of colors.
  Although now that I think about it, that would mean an image can now be modified
  instead of being view only.
  Think about what the best API is.

- Templatize container in scene (so std::array can be used for constexpr raytracer).

- Adaptive sampling (cast more rays if there is more variance in the pixel color).

- Tone mapping?

- Octree? R-d tree?

- Textures. Use object local coordinates for textures and also normals (UVs)?

- Finish material system. Specular color. Handle light color multiplication
  correctly, in both diffuse and specular. OpenPBR?

- Finish sampling: refractions, ...

- Add more primitives.

- Objects should be able to be moved/rotated and removed.

- Motion blur. Allow position to be function of time between shutter intervals.
  Time when ray is cast is then random.

- Different lenses/projections. Fisheye?

- In theory the position, view, right and up parameters are not needed in the lens.
  It should be possible to return a transformation-agnostic value and then transform
  it on the caller side.
  Do it that way to remove unnecessary dependencies if it is not too inconvenient/inefficient.

- Wide performance diferences between clang++ and g++. Benchmark and study.

- Add constexpr where applicable.

- Review noexcept usage (particualrly important in move
  constructors/assignments). See [1].
  [1]: https://stackoverflow.com/questions/10787766/

- Consider using normalized_vector class. I probably should implement it.

- Signed Distance Functions. Raymarching.

- Colormaps?

- CLI interface/options.

- Post-processing?